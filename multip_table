# Multiplication Table Generator: Traditional Bash  C-Style.

## Project Overview

This project showcases two different methods for generating a multiplication table using Bash scripting. It shows a modern, C-style `for` loop with a more traditional Bash `for` loop that uses the `seq` command. The goal is to demonstrate different syntactic approaches to achieve the same result, highlighting best practices and readability in shell scripting.

---

   ![screenshot](function/tablestyle1.png)
### 2. Traditional Bash For Loop
![screenshot](function/correct_cstyle.png)
        cstyle Bash
   ![screenshot](function/table.png)

   ![screenshot](function/table1.png)
   ![screenshot](function/table71.png)

**Traditional Style Script & Output:**
When you run
```
 ./multi_table.sh
```

```
enter a number for multiplication table
r
Invalid input. Please enter a positive integer.
adduser@Honour:~$ ./multi_table.sh
enter a number for multiplication table
7
Multiplication table for 7:
---------------------------------
7 * 1 = 7
7 * 2 = 14
7 * 3 = 21
7 * 4 = 28
7 * 5 = 35
7 * 6 = 42
7 * 7 = 49
7 * 8 = 56
7 * 9 = 63
7 * 10 = 70
```

**C-Style Script & Output:**
> **
```
----------------------------
adduser@Honour:~$ cat multi_table.sh
#!/bin/bash
  echo "enter a number for multiplication table"
  read number

# Check if the input is a valid number
if ! [[ "$number" =~ ^[0-9]+$ ]]; then
       echo "Invalid input. Please enter a positive integer."
       exit 1
fi

echo "Multiplication table for $number:"
echo "---------------------------------"

for i in {1..10}
    do
        product=$((number * i))
        echo "$number * $i = $product"
    done
```
with output: run
```
 ./multipl_table_cstyle.sh
```
```
Enter number for the multiplication table:
4
enter the range(e.g., 1 to 10):
4

Multiplication Table for 4 up to 4:
----------------------------
4 x 1 = 4
4 x 2 = 8
4 x 3 = 12
4 x 4 = 16
```
##Error Handling
![screenshot](function/errorhandled.png)
![screenshot](function/cerrorhand.png)

## ðŸš€ How to Use

1.  **Save the Scripts**: Save the code for each version into separate files (e.g., `multipl_table_cstyle.sh` and `multi_table.sh`).
2.  **Make Them Executable**: Open your terminal and run the following command for each file:
    ```bash
    chmod +x multipl_table_cstyle.sh
    chmod +x multi_table.sh
    ```
     ![screenshot](function/tablechmod.png)
     ![screenshot](function/Cstylemoved.png)

3.  **Run the Scripts**: Execute them from your terminal to see the multiplication table:
    ```bash
    ./multipl_table_cstyle.sh
    ```
    ```bash
   ./multi_table.sh
    ```

---

## ðŸ’» Code Styles Explained

This project implements the multiplication table in two distinct styles to compare looping mechanisms in Bash.

### 1. C-Style For Loop

   ![screenshot](function/correct_cstyle.png)
This version uses a double-parentheses syntax for the `for` loop, which closely resembles the syntax found in programming languages like C, C++, and Java.

 
* **Syntax**: The key line is `for (( i=1; i<=range; i++ ))`.
    * `i=1`: Initialization of the counter.
    * `i<=range`: The condition that is checked before each iteration.
    * `i++`: The post-iteration increment of the counter.
* **Why use it?**: This style is often preferred for its clear, all-in-one structure for handling loop control. It's very efficient and familiar to developers coming from other programming backgrounds.

   ![screenshot](function/tablestyle1.png)
### 2. Traditional Bash For Loop

This method uses the standard Bash `for...in` loop combined with command substitution to generate a sequence of numbers.

* **Syntax**: The key line is `for i in $(seq 1 $range)`.
    * `seq 1 $range`: This command generates a sequence of numbers from 1 up to the value of the `range` variable.
    * `$(...)`: This is command substitution, which runs the `seq` command and "pastes" its output into the script.
    * `for i in ...`: The loop then iterates over each number provided by `seq`.
* **Why use it?**: This approach is very "shell-like" and idiomatic to traditional scripting. It clearly separates the action of generating a list from the action of iterating over it, which some find more readable.

   ![screenshot](function/cstyleout.png)


## Summary of Learnings

Through this project, I gained a deeper understanding of looping constructs in Bash. I learned how to implement both C-style and traditional loops, analyze their differences in syntax and readability, and write clean, functional scripts to produce formatted output. This was a great exercise in core shell scripting fundamentals.
---

   ![screenshot](function/thatsall.png)
## Summary of Learnings

Through this project, I gained a deeper understanding of looping constructs in Bash. I learned how to implement both C-style and traditional loops, analyze their differences in syntax and readability, and write clean, functional scripts to produce formatted output. This was a great exercise in core shell scripting fundamentals.
